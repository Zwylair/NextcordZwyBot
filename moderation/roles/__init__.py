import nextcord.ext.commands
import nextcord.errors


success_embed = nextcord.Embed(
    title='‚úÖ –£—Å–ø–µ—Ö',
    description='–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!',
    colour=0x4ee28f
)
error_embed_role_higher = nextcord.Embed(
    title='üõë –û—à–∏–±–∫–∞!',
    description='–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! (—Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞)',
    colour=0xf95454
)
error_embed_user_no_permission_role_management = nextcord.Embed(
    title='üõë –û—à–∏–±–∫–∞!',
    description='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏)',
    colour=0xf95454
)
error_embed_bot_no_permission_role_management = nextcord.Embed(
    title='üõë –û—à–∏–±–∫–∞!',
    description='–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏)',
    colour=0xf95454
)


async def check_perms(interaction: nextcord.Interaction):
    perms = interaction.guild.me.guild_permissions
    return True if perms.administrator or perms.manage_roles else False


class RolesModerationCog(nextcord.ext.commands.Cog):
    def __init__(self, bot: nextcord.ext.commands.Bot):
        self.bot = bot

    @nextcord.slash_command(name='role', description='role')
    async def role(self, _: nextcord.Interaction):
        pass

    @role.subcommand(name='give', description='–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    async def give_role(
            self, interaction: nextcord.Interaction,
            member: nextcord.Member = nextcord.SlashOption(
                name='member',
                description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å'
            ),
            role: nextcord.Role = nextcord.SlashOption(
                name='role',
                description='–†–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞')
    ):
        if not await check_perms(interaction):
            await interaction.send(embed=error_embed_bot_no_permission_role_management, ephemeral=True)
            return

        for user_role in interaction.user.roles:
            if user_role.permissions.manage_roles or user_role.permissions.administrator:
                try:
                    await member.add_roles(role)
                    await interaction.send(embed=success_embed, ephemeral=True)
                    return
                except nextcord.errors.Forbidden:
                    await interaction.send(embed=error_embed_role_higher, ephemeral=True)
                    return
        else:
            await interaction.send(embed=error_embed_user_no_permission_role_management, ephemeral=True)
            return

    @role.subcommand(name='revoke', description='–ó–∞–±—Ä–∞—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    async def revoke_role(self, interaction: nextcord.Interaction,
                          member: nextcord.Member = nextcord.SlashOption(name='member', description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞–Ω–∞ —Ä–æ–ª—å'),
                          role: nextcord.Role = nextcord.SlashOption(name='role', description='–†–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–±—Ä–∞–Ω–∞')):
        if not await check_perms(interaction):
            await interaction.send(embed=error_embed_bot_no_permission_role_management, ephemeral=True)

        for user_role in interaction.user.roles:
            if user_role.permissions.manage_roles or user_role.permissions.administrator:
                try:
                    await member.remove_roles(role)
                    await interaction.send(embed=success_embed, ephemeral=True)
                    return
                except nextcord.errors.Forbidden:
                    await interaction.send(embed=error_embed_role_higher, ephemeral=True)
                    return
        else:
            await interaction.send(embed=error_embed_user_no_permission_role_management, ephemeral=True)
            return

    @role.subcommand(name='edit', description='–ò–∑–º–µ–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å. –ï—Å–ª–∏ –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ')
    async def edit_role(
            self, interaction: nextcord.Interaction,
            role: nextcord.Role = nextcord.SlashOption(
                name='role',
                description='–†–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞'
            ),
            new_role_name: str = nextcord.SlashOption(
                name='new_role_name',
                description='–ù–æ–≤–æ–µ –∏–º—è —Ä–æ–ª–∏',
                default='default',
                required=False
            ),
            colour: str = nextcord.SlashOption(
                name='colour',
                description='–¶–≤–µ—Ç —Ä–æ–ª–∏ –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä hex: "#ffffff"',
                default='default',
                required=False
            )
    ):
        if not await check_perms(interaction):
            await interaction.send(embed=error_embed_bot_no_permission_role_management, ephemeral=True)
            return

        for usr_role in interaction.user.roles:
            if usr_role.permissions.manage_roles or usr_role.permissions.administrator:
                new_name = new_role_name if new_role_name != 'default' else role.name
                new_colour = int(colour.lstrip("#"), 16) if colour != 'default' else role.colour

                try:
                    await role.edit(name=new_name, colour=new_colour)
                    await interaction.send(embed=success_embed, ephemeral=True)
                    return
                except nextcord.errors.Forbidden:
                    await interaction.send(embed=error_embed_role_higher, ephemeral=True)
                    return
        else:
            await interaction.send(embed=error_embed_user_no_permission_role_management, ephemeral=True)
            return

    @role.subcommand(name='move', description='–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏')
    async def move_role(
            self, interaction: nextcord.Interaction,
            role: nextcord.Role = nextcord.SlashOption(
                name='role',
                description='–ü–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º–∞—è —Ä–æ–ª—å'
            ),
            new_pos: int = nextcord.SlashOption(
                name='new_pos',
                description='–ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–æ–ª–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏'
            )
    ):
        if not await check_perms(interaction):
            await interaction.send(embed=error_embed_bot_no_permission_role_management, ephemeral=True)
            return

        for usr_role in interaction.user.roles:
            if usr_role.permissions.manage_roles or usr_role.permissions.administrator:
                try:
                    await role.edit(position=new_pos)
                    await interaction.send(embed=success_embed, ephemeral=True)
                    return
                except nextcord.errors.Forbidden:
                    await interaction.send(embed=error_embed_role_higher, ephemeral=True)
                    return
        else:
            await interaction.send(embed=error_embed_user_no_permission_role_management, ephemeral=True)
            return
